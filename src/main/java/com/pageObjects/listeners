driver listners

package com.svb.listeners;

import com.google.common.io.Resources;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfWriter;
import com.svb.annotations.NeedBrowser;
import com.svb.core.DataStore;
import com.svb.core.TestDataRetriever;
import com.svb.drivers.Browser;
import com.svb.drivers.DriverFactory;
import com.svb.drivers.DriverManager;
import com.svb.internals.ScreenshotBookKeeper;

import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.testng.*;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;

import static com.google.common.base.Preconditions.checkArgument;

public class DriverListener implements IInvokedMethodListener {

    Logger logger = LoggerFactory.getLogger(getClass());
    
    private static Font catFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 18);
    private static Font subFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 16, Font.BOLD);
    private static Font failFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 16, BaseColor.RED);
    private static Font passFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 16, BaseColor.GREEN);

    public void beforeInvocation(IInvokedMethod method, ITestResult testResult) {
        if (method.isTestMethod()) {
            ITestNGMethod testMethod = method.getTestMethod();
            Method actualMethod = testMethod.getConstructorOrMethod().getMethod();
            Map<String, String> allParameters = testMethod.getXmlTest().getAllParameters();
            System.out.println("Map Values of ITestNGMethod "+allParameters);
            if (allParameters.containsKey("remoteUrl")) {
                String capabilityFilePath = "";
                if (null != System.getProperty("browserName")) {
                    capabilityFilePath = "" + System.getProperty("browserName").trim() + ".properties";
                } else {
                    checkArgument(allParameters.containsKey("capabilityFilePath"),
                            "For remote execution, the <capabilityFilePath> is mandatory parameter");
                    capabilityFilePath = allParameters.get("capabilityFilePath");
                }
                String remoteUrl = allParameters.get("remoteUrl");
                createDriverInstance(remoteUrl, capabilityFilePath);
                return;
            }
            if (allParameters.containsKey("browserName")) {
                String browserName = allParameters.get("browserName");
                try {
					createDriverInstance(browserName);
				} catch (MalformedURLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
                return;
            }
            if (actualMethod.isAnnotationPresent(NeedBrowser.class)) {
            	System.out.println("Arun --> Inside Driver Listner --> before invocation");
                NeedBrowser annotation = actualMethod.getAnnotation(NeedBrowser.class);
                String browserName = annotation.name();
                String remoteUrl = annotation.remoteUrl();
                if (remoteUrl.equals("")) {
                	System.out.println("Inside remote Url If Case");
                    try {
						createDriverInstance(browserName);
					} catch (MalformedURLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
                    return;
                }
                String capabilityFilePath = annotation.capabilityFilePath();
                System.out.println(" --Capability File Path Defined is-- "+capabilityFilePath);
                checkArgument(!capabilityFilePath.equals(""),
                        "For remote execution, the <capabilityFilePath> is mandatory parameter");
                createDriverInstance(remoteUrl, capabilityFilePath);
            }
        }
    }

    private void createDriverInstance(String remoteUrl, String capabilityFilePath) {
    	File file = getCapabilityFilePath(capabilityFilePath);
        RemoteWebDriver driver = DriverFactory.createInstance(remoteUrl, file);
        DriverManager.setDriver(driver);
    }

    private File getCapabilityFilePath(String fileName) {
        URL capUrl = Resources.getResource(fileName);
        File capFile;
        try {
            capFile = new File(capUrl.toURI());
        } catch (URISyntaxException e) {
            throw new RuntimeException("Invalid cap file", e);
        }
        return capFile;
    }

    public void afterInvocation(IInvokedMethod method, ITestResult testResult) {
        if (method.isTestMethod()) {
            ITestNGMethod testMethod = method.getTestMethod();
            Method actualMethod = testMethod.getConstructorOrMethod().getMethod();
            if (actualMethod.isAnnotationPresent(NeedBrowser.class) || testMethod.getXmlTest().getAllParameters().containsKey("browserName")) {
                if (DriverManager.getDriver() != null) {
                   // DriverManager.getDriver().quit();
                }
            }
            method.getTestResult().setAttribute("testName", method.getTestResult().getTestContext().getAttribute("testName"));
            method.getTestResult().setAttribute("testData", TestDataRetriever.getUsedTestData());
            // Generate a PDF test evidence document for every test
            String evidenceFile = generateTestEvidence(testMethod, testResult.getStatus());
            method.getTestResult().setAttribute("evidenceFile", evidenceFile);
        }
        /**
         * Clearing Test Data's after getting used for the current running method
         * <p>
         *     Reason : If you don't clear, it'll include current test data into the next test case script
         * </p>
         */
        TestDataRetriever.clear();
        ScreenshotBookKeeper.clear();
        DataStore.clear();
    }

    private void createDriverInstance(String browserName) throws MalformedURLException {
    	System.out.println("Inside createDriverInstance");
        if (browserName.equals("")) {
            browserName = Browser.CHROME.toString();
            System.out.println("here");
            System.out.println("Changed the --> Browser Name  Defined is---------------"+browserName);
        }
        System.out.println("Diverting to Driver Factory");
        RemoteWebDriver driver = DriverFactory.createInstance(browserName);
        System.err.println("passing the driver to setDriver method");
        DriverManager.setDriver(driver);
    }

    private String generateTestEvidence(ITestNGMethod testMethod, int status) {

        StringBuilder sbPdfFileName = new StringBuilder();
        try {
            String suiteName = testMethod.getXmlTest().getSuite().getName();
            System.out.println("Arun  'generateTestEvidence' - suite Name "+suiteName);
            String testName = testMethod.getXmlTest().getName();
            System.out.println("Arun  'generateTestEvidence' testName "+testName);
            String methodName = testMethod.getMethodName();
            System.out.println("Arun  'generateTestEvidence' methodName "+methodName);
            
            sbPdfFileName.append(TestNG.DEFAULT_OUTPUTDIR);
            sbPdfFileName.append(File.separator + suiteName + "_");
            sbPdfFileName.append(testName + "_");
            sbPdfFileName.append(methodName + "_");
            sbPdfFileName.append((new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss").format(new Date())) + ".pdf");
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream(sbPdfFileName.toString()));
            document.open();

            addMetaData(document);
            addTitlePage(document, status);
            addContent(document);
            document.close();
            File file = new File(sbPdfFileName.toString());
            return file.getName();
        } catch (Exception e) {
            logger.error("generateTestEvidence ", e);
        }
        return null;
    }

    private void addMetaData(Document document) {
        document.addTitle("Test Evidence");
        document.addSubject("Using test automation");
        document.addAuthor(System.getProperty("user.name"));
    }

    private void addTitlePage(Document document, int status) throws DocumentException {
        Paragraph preface = new Paragraph();
        addEmptyLine(preface, 1);

        preface.add(new Paragraph("Test Evidence", catFont));
        addEmptyLine(preface, 1);

        preface.add(new Paragraph("Generated by: " + " Arun S"/*System.getProperty("user.name")*/, subFont));
        preface.add(new Paragraph("Generated on: " + new Date(), subFont));
        if (status == 1) {
            preface.add(new Paragraph("Status: PASS", passFont));
        } else {
            preface.add(new Paragraph("Status: FAIL", failFont));
        }
        document.add(preface);
        document.newPage();
    }

    private static void addContent(Document document) throws DocumentException, IOException {
        Map<String, String> screenshotMap = ScreenshotBookKeeper.getScreenshotMap();
        int i = 1;
        for (Map.Entry<String, String> screenshotItem : screenshotMap.entrySet()) {
            // Create a bookmark
            Anchor anchor = new Anchor(screenshotItem.getValue(), catFont);
            Chapter catPart = new Chapter(new Paragraph(anchor), i);
            addEmptyLine(new Paragraph(), 1);

            Image image1 = Image.getInstance(screenshotItem.getKey());

            // Set the image size to scale to fit
            float scalar = ((document.getPageSize().getWidth() - document.leftMargin() - document.rightMargin()) / image1.getWidth()) * 100;
            image1.scalePercent(scalar);

            catPart.add(image1);
            document.add(catPart);
            i++;
        }
    }

    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }

}
