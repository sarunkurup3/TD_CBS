package com.svb.core;

import org.apache.logging.log4j.LogManager;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Created by dikuppan on 04/26/2018.
 *
 * @author dikuppan
 * @version 1.0
 *
 * <p>An internal data store that is meant to be used to
 * value in data store to access outside/share between
 * classes at runtime</p>
 */
public class DataStore {

    private static org.apache.logging.log4j.Logger logger = LogManager.getLogger(DataStore.class);

    private static ThreadLocal<Map<String, Object>> customDataStoreMap = ThreadLocal.withInitial(ConcurrentHashMap::new);

    //private constructor
    private DataStore() {
    }

    /**
     * Implementation of Thread Local for DataStore - User Defined data's at Runtime access
     *
     * @return
     */
    public static Map<String, Object> getDataStoreMap() {
        return customDataStoreMap.get();
    }

    /**
     * Put the value in data store to access outside/share between classes
     *
     * @param keyName
     * @param objectDataType
     */
    public static void put(String keyName, Object objectDataType) {
        if (getDataStoreMap().containsKey(keyName)) {
            return;
        }
        getDataStoreMap().put(keyName, objectDataType);
    }

    /**
     * <p>Fetch the value based on the key name passed
     * And<br/>
     * Use the stored data to display in report dashboard
     * </p>
     *
     * @param keyName
     * @return
     */
    public static Object get(String keyName) {
        logger.debug("Current Test Case accessing the key {" + keyName + "}");
        Object data = getDataStoreMap().get(keyName);
        TestDataRetriever.setUserDefinedTestDataUsedAsInput(keyName, data);
        return data;
    }

    /**
     * Clears after every test method execution
     */
    public static void clear() {
        customDataStoreMap.remove();
    }
}
